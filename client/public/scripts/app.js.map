{"version":3,"file":"public/scripts/app.js","sources":["app/application.js","app/collections/geolocations.js","app/initialize.js","app/locales/en.js","app/locales/fr.js","app/models/geolocation.js","app/models/main.js","app/models/testdata.js","app/router.js","app/templates/home.jade","app/views/app_view.js","app/views/map_view.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AALA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApjBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxsourcesContent":["module.exports = {\n\n    initialize: function() {\n        var Router = require('router');\n        this.router = new Router();\n        Backbone.history.start();\n    }\n};","Geolocation = require('../models/geolocation');\nmodule.exports = Geolocations = Backbone.Collection.extend({\n    model: Geolocation,\n    url: 'geolocations'\n})\n","// The function called from index.html\n$(document).ready(function() {\n    var app = require('application');\n\n    var locale = 'fr'; // default locale\n\n    // we'll need to tweak the server to allow this\n    $.ajax('cozy-locale.json', {\n        success: function(data) {\n            locale = data.locale\n            initializeLocale(locale);\n        },\n        error: function() {\n            initializeLocale(locale);\n        }\n    });\n\n    // let's define a function to initialize Polyglot\n    var initializeLocale = function(locale) {\n        var locales = {};\n        try {\n            locales = require('locales/' + locale);\n        }\n        catch(err) {\n            locales = require('locales/en');\n        }\n\n        var polyglot = new Polyglot();\n        // we give polyglot the data\n        polyglot.extend(locales);\n\n        // handy shortcut\n        window.t = polyglot.t.bind(polyglot);\n        app.initialize();\n    };\n});\n","module.exports = {\n    \"main title\": \"Welcome to My Moves\",\n    \"main description\": \"This application will help you visualise your prefered places!\",\n}","module.exports = {\n    \"main title\": \"Bienvenue sur Mes Déplacement\",\n    \"main description\": \"Cette application vous permet de visualiser les lieux ou vous etes passés. !\",\n}","module.exports = Geolocation = Backbone.Model.extend({\n\n})\n","var heatmap;\n\n$(function(){\n    var myLatlng = new google.maps.LatLng(43.293466, 5.364575);\n\n    var myOptions = {\n      zoom: 8,\n      center: myLatlng,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      disableDefaultUI: false,\n      scrollwheel: true,\n      draggable: true,\n      navigationControl: true,\n      mapTypeControl: false,\n      scaleControl: true,\n      disableDoubleClickZoom: false\n    };\n    var map = new google.maps.Map($(\"#heatmapArea\")[0], myOptions);\n    \n    heatmap = new HeatmapOverlay(map, {\n        \"radius\":20,\n        \"visible\":true, \n        \"opacity\":60\n    });\n  \n    \n\n    \n    \n    // this is important, because if you set the data set too early, the latlng/pixel projection doesn't work\n    google.maps.event.addListenerOnce(map, \"idle\", function(){\n    \tupdateMap(map);\n    });\n    google.maps.event.addListener(map, 'click', function(e) {\n    \tlistFiles(e.latLng, map);\n    });\n    google.maps.event.addListener(map, 'bounds_changed', function(e) {\n        // updateMap(map);\n    });\n});\n        \nfunction updateMap(map){\n\tvar bound = map.getBounds();\n\tvar queryObject = {\n\t\t\tnorth: bound.getNorthEast().lat(),\n\t\t\tsouth: bound.getSouthWest().lat(),\n\t\t\teast : bound.getNorthEast().lng(),\n\t\t\twest : bound.getSouthWest().lng(),\n\t};\n\t$.getJSON('/api/area-geodata', queryObject, function(data) {\n\t\tvar geoData = new Array();\n\t\tvar googleLatLng = new Array(); \n\t\t$.each(data, function(key, val) {\n\t\t\tgeoData.push({lng:val.longitude, lat:val.latitude, count:1});\n\t\t\tgoogleLatLng.push(latLng = new google.maps.LatLng(val.latitude, val.longitude));\n\t\t});\n\t\tconsole.log(\"nb points:\",geoData.length);\n\t\t// ajax implementation\n\t\t\n\t\t// heatmap.setDataSet({max: 2, data: geoData});\n\t\theatmap.setDataSet(testData);\n\n\t\t// google implementation\n\t\t//\t\tvar gHeatmap = new google.maps.visualization.HeatmapLayer({\n\t\t//\t\t\t  data: googleLatLng\n\t\t//\t\t\t});\n\t\t//\t\t\tgHeatmap.setMap(map);\n\t});\n};\n            \nfunction placeMarker(position, map) {\n  var marker = new google.maps.Marker({\n    position: position,\n    map: map\n  });\n  map.panTo(position);\n}\n\nvar clickMarker = null;\nfunction listFiles(position, map) {\n\tif(clickMarker){\n\t\tclickMarker.setVisible(false);\n\t};\n\tvar span = map.getBounds().toSpan();\n\tvar radius = span.lat()<span.lng()?span.lng():span.lat();\n\t// radius = radius;\n\tconsole.log(\"radius\",radius);\n\tclickMarker = new google.maps.Marker({\n\t    position: position,\n\t    map: map\n\t  });\n\t  map.panTo(position);\n\tvar latLng = {\n\t\t\tlatitude:position.lat(),\n\t\t\tlongitude:position.lng(),\n\t\t\tradius:radius * 4\n\t};\n\tconsole.log(latLng);\n\t$.getJSON('api/geo-datasets', latLng, function(data) {\n\t\t$(\"#datasets\").html(\"\");\n\t\t$.each(data, function(key, val) {\n\t\t\tconsole.log(val);\n\t\t\t$(\"#datasets\").append(\"<tr><td>\"+val.name+\"</td></tr>\")\n\t\t});\n\t});\n}\n","var testData={\n    };\n","var AppView = require('views/app_view');\nvar GeolocationCollection = require('collections/geolocations');\n\nvar geolocations = new GeolocationCollection();\n\nmodule.exports = Router = Backbone.Router.extend({\n\n    routes: {\n        '': 'main'\n    },\n\n    main: function() {\n        var mainView = new AppView({\n            collection: geolocations\n        });\n        mainView.render();\n    }\n});","module.exports = function anonymous(locals, attrs, escape, rethrow, merge) {\nattrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;\nvar buf = [];\nwith (locals || {}) {\nvar interp;\nbuf.push('<div id=\"modal-overlay\"></div><div id=\"loader\"><img src=\"loader.gif\" alt=\"je charge\"/></div><div class=\"navbar navbar-inverse navbar-fixed-top\"><div class=\"navbar-inner\"><div class=\"container\"><a data-toggle=\"collapse\" data-target=\".nav-collapse\" class=\"btn btn-navbar\"><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span></a><a href=\"#\" class=\"brand\"> MesInfos Géographiques</a><div class=\"nav-collapse collapse\"><ul class=\"nav\"><li><a href=\"#dataviz\"> Cartes</a></li><li><a href=\"#about\"> A Propos</a></li><li><a href=\"#contact\"> Contact</a></li></ul></div></div></div></div><div id=\"content\" class=\"container\"><!--div(class=\"hero-unit\")--><h2> MesInfos Géographiques</h2><p>Cette application vous permet de naviguer visuellement dans votre historique des lieux que vous avez les plus fréquentés.<br/></p><div id=\"dataviz\"><div class=\"row\"><div class=\"span12\"><h2> Carte des lieux fréquentés</h2></div><div class=\"span4\"><p> \\nLa carte ci contre indique votre fréquentation géographique en se basant sur l\\'historique de positionnement de votre téléphone.<br>\\nElle permet en un clein d\\'oeuil de voir les lieux les plus fréquentés sans tenir compte du temps.</p><p> \\nPlus la couleur est intense et plus vous avez fréquenté la zone coloré.<br>\\nVous pouvez vous déplacer et zoomer sur une zone pour plus de précision.</p><p>Le graphe de fréquentation ci-dessous est mis à jour lors de vos déplacement sur la carte.</p></div><div class=\"span8\"><!--p(class=\"text-info\")  OpenStreetMap (Leaflet)--><div id=\"map\" style=\"padding:0;height:400px;cursor:pointer;position:relative;\" class=\"well\"></div></div></div><div class=\"row\"><div class=\"span12\"><h2> Graphe de fréquentation</h2></div><div class=\"span8\"><div id=\"chartArea\" style=\"padding:0;height:200px;cursor:pointer;position:relative;\" class=\"well\"></div></div><div class=\"span4\"><p>Ce graphe indique les dates de votre présence sur la zone visible de la carte <br/></p><p>La hauteur du graphe indique le nombre de relevé (votre temps de présence) relatif sur la zone visible de la carte <br/></p><p>En pointant les points de ce graphe, la carte est mise à jour en n\\'indiquant QUE les lieux fréquentés à la date pointé.</p></div></div></div><div id=\"about\" class=\"row\"><div class=\"span12\"><h2> A Propos</h2><p> \\nL\\'appli MesInfos Géographique à été imaginée dans le cadre du concours mes infos organisé par la Fing.<br/>\\nIl à pour objectif de permettre aux utilisateurs de visualiser la carte de ses déplacement.</p><p> \\nLes données utilisées ici sont fournies par orange et sont basé sur la triangulation de votre téléphone <br/>\\nLa précision des coordonnées est variable et la carte est uniquement indicative, et le fait d\\'etre \"vu\" en un lieu ne signifie pas nécéssairement que vous y étiez. \\nCependant il indique que vous n\\'étiez vraisemblablement pas loin. <br/></p></div></div><div id=\"contact\" class=\"row\"><div class=\"span3\"><h2> Contacts</h2><p> Patrice Delorme <br/>\\n@pdelorme<br/>\\npdelorme@lookal.fr</p></div></div><!-- footer      --><footer><p> &copy; Patrice Delorme 2013</p></footer></div>');\n}\nreturn buf.join(\"\");\n};","var StatsView = require('./map_view');\n\nmodule.exports = AppView = Backbone.View.extend({\n\n    el: 'body',\n    template: require('../templates/home'),\n    events: {\n        \"click #refreshButton\": \"refreshMap\"\n    },\n\n    // initialize is automatically called once after the view is constructed\n    initialize: function() {\n        // this.listenTo(this.collection, \"add\", this.onBookmarkAdded);\n    },\n\n    render: function() {\n\n        // we render the template\n        this.$el.html(this.template());\n        this.refreshMap();\n        // fetch the receipts from the database\n        this.collection.fetch();\n    },\n\n    refreshMap: function(event) {\n      // render the stats view\n      mapView = new MapView({\n          model: this.collection\n      });\n      mapView.render();\n      // this.$el.find('#tab-content').html(statsView.$el);\n    },\n    \n    coachView:function(event){\n    \tthis.$el.find('#tab-content').html(\"\");\n    },\n    \n    controlView:function(event){\n    \tthis.$el.find('#tab-content').html(\"\");\n    }\n});","var myLat = 43.293466;\nvar myLng = 5.364575;\n\nmodule.exports = MapView = Backbone.View.extend({\n\n    el: '#dataviz',\n    \n    events: {\n        \"click #refreshButton\": \"refreshView\"\n    },\n    \n    // initialize is automatically called once after the view is constructed\n    initialize: function() {\n        var that = this;\n        $(\"#modal-overlay\").show();\n        $(\"#loader\").show();\n\t\tthis.fetchData(null, function(){\n          $(\"#modal-overlay\").hide();\n          $(\"#loader\").hide();\n\t\t  that.initLeafletMap();\n\t\t  that.initChart();\n\t\t  that.updateMap(function(){\n            that.updateChart();\n\t\t  });\n\t      navigator.geolocation.getCurrentPosition(\n\t          function(location){\n\t                that.latitude = location.coords.latitude;\n\t                that.longitude = location.coords.longitude;\n\t                that.gotoLocation(that.longitude,that.latitude);\n\t          }\n\t      );\n\t      this.reloader = setInterval(function(){\n\t        that.fetchData(null, function(){\n\t          that.updateMap(function(){\n\t            that.updateChart();\n\t          });\n\t        });\n\t      },5*60*1000);\n\t\t});\n\t},\n\n\tgotoLocation: function (longitude, latitude){\n\t\tif(this.lmap){\n\t\t\tthis.lmap.setView([latitude,longitude]);\n\t\t\tvar that = this;\n\t\t\tthat.updateChart();\n\t\t}\n\t},\n\n\tinitChart:function(){\n\t\t// init charts\n\t\tthis.geolocationChartData = [];\n\t\tthis.phoneCommunicationChartData = [];\n\t\tvar chartContainer = this.$el.find(\"#chartArea\")[0];\n\t\tvar that = this;\n\t\tthis.chart = new CanvasJS.Chart(chartContainer,{\n\t\t\ttitle:{\n\t\t\t\ttext: \"History\",\n\t\t\t\tfontSize:15,\n\t\t\t\tfontFamily:\"arial\",\n\t\t\t\tfontWeight:\"normal\",\n\t\t\t},\n\t\t\taxisX:{\n\t\t\t   //labelAngle: 50,\n\t\t\t   valueFormatString: \"D/M/Y\",\n\t\t\t   labelFontFamily:\"arial\",\n\t\t\t   labelFontSize:12,\n\t\t\t   lineThickness:0,\n\t\t\t   gridThickness:0,\n\t\t\t   tickThickness:0,\n\t\t\t   interval:1,\n\t\t\t   intervalType:\"week\"\n\t\t\t},\n\t\t\taxisY:{\n\t\t\t\t//title:\"Kilo Joules : Grammes\",\n\t\t\t\tvalueFormatString: \"0.##\",\n\t\t\t\tlabelFontSize:1,\n\t\t\t\t//labelFontColor:000,\n\t\t\t\tlineThickness:0,\n\t\t\t\tgridThickness:0,\n\t\t\t\ttickThickness:0,\n\t\t\t\tminimum:0,\n\t\t\t\tinterval:10\n\t\t\t},\n\t\t\tzoomEnabled:true,\n\t\t\tdata : [\n\t\t\t\t\t  {\n\t\t\t\t\t\t  type: \"line\",\n\t\t\t\t\t\t  color: \"rgba(54,158,173,.3)\",\n\t\t\t\t\t\t  dataPoints: this.geolocationChartData,\n\t\t\t\t\t\t  mouseover: function(e){\n\t\t\t\t\t\t\t  console.log(\"geo\");\n\t\t\t\t\t        that.showDayLocations(e.dataPoint.x);\n\t\t\t\t\t      },\n\t\t\t\t\t      mouseout: function(e){\n\t\t\t\t\t\t        that.updateMap();\n\t\t\t\t\t\t  },\n\t\t\t\t\t  },\n\t\t\t\t\t  { \n\t\t\t\t\t\t  type: \"line\",\n\t\t\t\t\t\t  color: \"rgba(8,15,173,.7)\",\n\t\t\t\t\t\t  dataPoints: this.phoneCommunicationChartData,\n\t\t\t\t\t\t  mouseover: function(e){\n\t\t\t\t\t\t\t  console.log(\"phone\");\n\t\t\t\t\t\t\t  that.showDayLocations(e.dataPoint.x);\n\t\t\t\t\t\t  },\n\t\t\t\t\t\t  mouseout: function(e){\n\t\t\t\t\t\t      that.updateMap();\n\t\t\t\t\t\t  },\n\t\t\t\t\t  }\n\t\t\t\t\t]\n\t\t});\n\t},\n\n\tinitLeafletMap: function(){\n\t\tthis.lmap = L.map('map').setView([43.2957, 5.3738], 6);\n\n\t\tvar tiles = L.tileLayer('http://{s}.tiles.mapbox.com/v3/{id}/{z}/{x}/{y}.png', {\n\t\t    attribution: '<a href=\"https://www.mapbox.com/about/maps/\">Terms and Feedback</a>',\n\t\t    id: 'examples.map-20v6611k'\n\t\t}).addTo(this.lmap);\n\n\t\tvar dummy = new Array();\n\t\tvar options = {\n\t\t    //max:1,\n\t\t    radius:10,\n\t\t    //blur:5,\n\t\t    maxZoom:8\n\t\t}\n\t\tthis.lheatmap = L.heatLayer(dummy,options).addTo(this.lmap);\n        var that = this;\n        this.lmap.on(\"moveend\", function(){\n          that.updateChart();\n        });\n\t},\n\t\n    render: function() {\n    \tvar that = this;\n    \tthis.updateMap(function(){\n    \t\tthat.updateChart();\n    \t});\n    },\n    \n    showDayLocations: function (day){\n    \tvar dayLData = this.dayLLocations[day];\n    \tthis.lheatmap.setLatLngs(dayLData);\n    },\n    updateMap: function(callback){\n    \tthis.lheatmap.setLatLngs(this.geoLData);\n    },\n    \n    updateLMap:function(callback){\n    \tvar bound = this.lmap.getBounds();\n    \tif(!bound)\n    \t\treturn;\n    \tvar queryObject = {\n\t\t\tnorth: bound.getNorth(),\n\t\t\tsouth: bound.getSouth(),\n\t\t\teast : bound.getEast(),\n\t\t\twest : bound.getWest()\n\t\t};\n    \t//console.log(\"south,north,west,east:\",queryObject.south,queryObject.north,queryObject.west,queryObject.east);\n    \tvar that = this;\n\t\tthis.fetchData(queryObject,function(){\n\t\t\tthat.lheatmap.setLatLngs(that.geoLData);\n\t\t\tif(callback)\n\t\t\t\tcallback();\n\t\t});\n    },\n    \n\tfetchData:function(bounds,callback){\n      var that = this;\n\t\t$.getJSON('areaGeolocations', bounds, function(data) {\n\t\t\tthat.locationData = data;\n//\t\t\tthat.geoGData = new Array();\n\t\t\tthat.geoLData = new Array();\n\t\t\t$.each(data.geolocationLogs, function(key, val) {\n//\t\t\t\tthat.geoGData.push({lng:val.lng, lat:val.lat, count:1});\n\t\t\t\tthat.geoLData.push([val.lat, val.lng, 1]);\n\t\t\t});\n\t\t\t$.each(data.phoneCommunicationLog, function(key, val) {\n//\t\t\t\tthat.geoGData.push({lng:val.lng, lat:val.lat, count:1});\n\t\t\t\tthat.geoLData.push([val.lat, val.lng, 1]);\n\t\t\t});\n\t\t\tconsole.log(\"nb points:\",that.geoLData.length);\n\t\t\tif(callback)\n\t\t\t\tcallback();\n\t\t});\n\t},\n\t\n\tupdateChart: function(){\n\t  var data = this.locationData;  \n\t  if(!data)\n\t      return;\n\t\tvar that = this;\n        var bounds = this.lmap.getBounds();\n        this.dayLLocations = {};\n\t\tif(data.geolocationLogs) {\n\t        var dayAccumulator = {};\n    \t\t$.each(data.geolocationLogs, function(key, val) {\n    \t\t    if(val.lng>bounds.getEast())\n    \t\t      return;\n                if(val.lng<bounds.getWest())\n                  return;\n                if(val.lat>bounds.getNorth())\n                  return;\n                if(val.lat<bounds.getSouth())\n                  return;\n    \n    \t\t\tvar dayParts = val.d.split('-');\n    \t\t\tvar day = new Date(dayParts[0], dayParts[1], dayParts[2]);\n    \t\t\tif(!dayAccumulator[day]){\n    \t\t\t\tdayAccumulator[day] = 1;\n    \t\t\t\tthat.dayLLocations[day] = new Array();\n    \t\t\t} else {\n    \t\t\t\tdayAccumulator[day] = dayAccumulator[day] + 1;\n    \t\t\t}\n    \t\t\tthat.dayLLocations[day].push([val.lat,val.lng]);\n    \t\t});\n            this.geolocationChartData.length = 0;\n            dayAccumulator = this.toChartData(dayAccumulator,this.geolocationChartData);\n\t\t}\n\t\tif(data.phoneCommunicationLog) {\n    \t\tvar dayAccumulator = {};\n    \t\t$.each(data.phoneCommunicationLog, function(key, val) {\n              if(val.lng>bounds.getEast())\n                return;\n              if(val.lng<bounds.getWest())\n                return;\n              if(val.lat>bounds.getNorth())\n                return;\n              if(val.lat<bounds.getSouth())\n                return;\n    \t\t\tvar dayParts = val.d.split('-');\n                var day = new Date(dayParts[0], dayParts[1], dayParts[2]);\n    \t\t\tif(!dayAccumulator[day]){\n    \t\t\t\tdayAccumulator[day] = 1;\n    \t\t\t\tthat.dayLLocations[day] = new Array();\n    \t\t\t} else {\n    \t\t\t\tdayAccumulator[day] = dayAccumulator[day] + 1;\n    \t\t\t}\n    \t\t\tthat.dayLLocations[day].push([val.lat,val.lng]);\n    \t\t});\n    \t\t\n    \t\tthis.phoneCommunicationChartData.length = 0;\n    \t\tdayAccumulator = this.toChartData(dayAccumulator,this.phoneCommunicationChartData);\n\t\t}\n\t\tthis.chart.render();\n\t},\n        \n\ttoChartData: function (inputmap, output) {\n\t\toutput.length = 0;\n\t  var keys=[];\n\t  for(var k in inputmap) {\n\t\t  keys.push(k);\n\t  }\n\t  keys.sort(function(a, b) {\n\t\t    a = new Date(a);\n\t\t    b = new Date(b);\n\t\t    return a>b ? -1 : a<b ? 1 : 0;\n\t\t});\n\n\t  for(var i=0; i<keys.length; i++) {\n\t\t  output.push({x: new Date(keys[i]), y : inputmap[\"\"+keys[i]]});\n\t  }\n\t  output.length = keys.length;\n\t  return output;\n\t}\n});\n\n\n"]}